info:
  app:
    name: dps-multi-module-starterkit-java
    description: Java API Starter from Template

management:
  # TODO: Figure out the proper security for these, and perhaps don't expose everything
  endpoints.web.exposure.include: "*"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    enabled: true
    distribution:
      percentiles.http.server.requests: 0.5, 0.90, 0.95, 0.99, 0.999
      percentiles-histogram.http.server.requests: true
      sla.http.server.requests: 10ms, 50ms
      slo.http.server.requests: 10ms, 50ms
    tags:
      group: starter
      service: example
      region: "${POD_REGION:local}"
      stack: "${CLUSTER:dev}"
      ns: "${NAMESPACE:example}"
      pod: "${POD_ID:docker}"
    web.server.request.autotime.enabled: true
  server.port: 8081

# Setting up K8 health probes - with health probs set to true you can use
# the paths in your config like the snippet below

#livenessProbe:
#  httpGet:
#    path: /actuator/health/liveness
#    port: 8081
#  failureThreshold: ...
#  periodSeconds: ...
#
#readinessProbe:
#  httpGet:
#    path: /actuator/health/readiness
#    port: 8081
#  failureThreshold: ...

server:
  tomcat:
    basedir: build/tomcat
    max-threads: 100
  ssl:
    enabled: false
  port: 8080

spring:
  application:
    name: Example

  #TODO: integrate with secrets mgmt and integrate flyway
  datasource:
    url: "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1"
    username: skuser
    password: localT3st!
  jpa:
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: create
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      org.hibernate.envers.audit_table_suffix: _audit
      org.hibernate.envers.revision_field_name: revision_id
      org.hibernate.envers.revision_type_field_name: type
      org.hibernate.envers.global_with_modified_flag: true
      org.hibernate.envers.store_data_at_delete: true
      hibernate:
        generate_statistics: false
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
        jdbc:
          lob:
            non_contextual_creation=true:
  kafka:
    bootstrap-servers: "kafka:9092"
    topic:
      name: example-entity-lifecycle
    replication:
      factor: 1
    partition:
      number: 2
    consumer:
      auto-offset-reset: earliest
      group-id: starter
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties.spring.json.value.default.type: io.twdps.starter.boot.notifier.EntityLifecycleNotification
      level:
        concurrency: 5
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties.spring.json.value.default.type: io.twdps.starter.boot.notifier.EntityLifecycleNotification

opentracing:
  zipkin:
    enabled: true
    http-sender.baseUrl: http://zipkin.istio-system.svc.cluster.local:9411

springdoc:
  writer-with-default-pretty-printer: true
  show-actuator: true
  swagger-ui:
    operations-sorter: method

starter:
  openapi:
    authUrl: https://iam.twdps.io/whoami
    default-oauth-security-scheme: true
    default-jwt-bearer-security-scheme: true
    license: MIT License
    title: Example service
    description: Example service providing Account info
    version: v1
    licenseUrl: https://github.com/thoughtworks-dps/dps-multi-module-starterkit-java/blob/master/LICENSE
    contactEmail: starter-java@example.com
    contactUrl: https://example.twdps.io/
    contactName: Example
    serverUrl: http://localhost:8080
  boot:
    kafka-lifecycle-notifier:
      queue-name: example-entity-lifecycle

opa:
  filter:
    enabled: true
    document-path: authz
    instance: http://opa:8181
    endpoints-whitelist: /actuator/**,/swagger-ui/**,/v3/api-docs/**
