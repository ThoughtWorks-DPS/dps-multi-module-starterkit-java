plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'checkstyle'
    id "idea"
//    id "io.spring.dependency-management"
    id 'jacoco'
    id "org.ajoberstar.grgit"
    id "io.swagger.swaggerhub"
    id "com.diffplug.spotless"
}

sourceCompatibility = '11'

repositories {

    mavenLocal()
    jcenter()
    mavenCentral()
    /*
    maven {
        url "https://maven.pkg.github.com/ThoughtWorks-DPS/dps-multi-module-starterkit-java"
        credentials {
            username ""
            password ""
        }
    }*/
}

/*
configurations {
    springBom
    compileOnly.extendsFrom(springBom)
    annotationProcessor.extendsFrom(springBom)
    implementation.extendsFrom(springBom)
    testAnnotationProcessor.extendsFrom(springBom)

    annotationBom
    annotationProcessor.extendsFrom(annotationBom)
    testAnnotationProcessor.extendsFrom(annotationBom)
}
*/

dependencies {
//    implementation platform('io.twdps.starter::starter-bom:0.0.1-SNAPSHOT')
//    api platform('io.twdps.starter::starter-bom:0.0.1-SNAPSHOT')
//    implementation platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
//    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
//    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
/*
    constraints {
        implementation 'io.twdps.starter:tracing'
//        implementation "io.twdps.starter:tracing:0.0.1-SNAPSHOT"
//        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310${jackson_version}"
        implementation "io.opentracing.brave:brave-opentracing:${brave_opentracing_version}"
        implementation "io.opentracing.contrib:opentracing-spring-web-starter:${opentracing_spring_web_starter_version}"
        implementation "io.opentracing.contrib:opentracing-spring-cloud-jdbc-starter:${opentracing_spring_cloud_jdbc_starter_version}"
        implementation "io.opentracing:opentracing-api:${opentracing_api_version}"
        implementation "io.zipkin.reporter2:zipkin-reporter:${zipkin_reporter_version}"
        implementation "io.zipkin.reporter2:zipkin-sender-okhttp3:${zipkin_sender_okhttp3_version}"
        implementation "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:${gradle_intellij_plugin_version}"
//        implementation "org.assertj:assertj-core${assertj_core_version}"
//        implementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_api_version}"
        implementation "org.mapstruct:mapstruct:${mapstruct_version}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
//        implementation "org.mockito:mockito-core${mockito_version}"
    //    implementation "org.projectlombok:lombok${lombok_version}"
//        annotationProcessor "org.projectlombok:lombok${lombok_version}"
//        testAnnotationProcessor "org.projectlombok:lombok${lombok_version}"
        implementation "org.spockframework:spock-core:${spock_core_version}"
//        implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
        // TODO:  Not sure if this exclusion should be in the BOM
//        api "org.springframework.boot:spring-boot-starter-test:${spring_boot_version}" {
//            exclude "org.junit.vintage:junit-vintage-engine"
//        }

        runtime "com.h2database:h2:${h2_version}"
        runtime "io.opentracing:opentracing-mock:${opentracing_mock_version}"
//        runtime "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_api_version}"
        runtime "org.mock-server:mockserver-netty:${mockserver_netty_version}"
        runtime "org.postgresql:postgresql:${postgresql_version}"
    }
*/
//    implementation platform("io.twdps.starter:starter-bom:${dps_starter_boot_version}")
//    annotationProcessor platform("io.twdps.starter:starter-bom:${dps_starter_boot_version}")
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    compileOnly 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core'
//    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
    //since this is a spring boot starter, assume spring at all levels
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion "${checkstyle_version}"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [
            'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
    ]
    ignoreFailures = true
    showViolations = true

}

checkstyleMain {
    source = "src/main/java"
}
checkstyleTest {
    source = "src/test/java"
}

jacoco {
    toolVersion = "${jacoco_version}"
    reportsDirectory = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}
