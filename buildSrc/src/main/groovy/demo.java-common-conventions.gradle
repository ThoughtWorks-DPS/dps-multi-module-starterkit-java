plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'checkstyle'
    id "idea"
    id "io.spring.dependency-management"
    id 'jacoco'
    id "org.ajoberstar.grgit"
    id "io.swagger.swaggerhub"
    id "com.diffplug.spotless"
}

sourceCompatibility = '11'

repositories {

    jcenter()
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/ThoughtWorks-DPS/dps-multi-module-starterkit-java"
        credentials {
            username ""
            password ""
        }
    }
}


dependencies {
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jackson_version}"

    compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombok_version}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}", "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombok_version}"
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombok_version}"
    // Use JUnit Jupiter API for testing.
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_api_version}"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testCompile group: 'org.mockito', name: 'mockito-core', version: "${mockito_version}"
//    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockito_version}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertj_core_version}"
    //since this is a spring boot starter, assume spring at all levels
    testImplementation(group: 'org.springframework.boot', name:'spring-boot-starter-test', version: "${spring_boot_version}") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion "${checkstyle_version}"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [
            'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
    ]
    ignoreFailures = true
    showViolations = true

}

checkstyleMain {
    source = "src/main/java"
}
checkstyleTest {
    source = "src/test/java"
}

jacoco {
    toolVersion = "${jacoco_version}"
    reportsDir = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}
