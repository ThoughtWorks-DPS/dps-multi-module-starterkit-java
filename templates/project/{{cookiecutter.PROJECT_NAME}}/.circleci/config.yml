version: 2.1

orbs:
  secrethub: secrethub/cli@1.0.0
executors:
  build-agent:
    docker:
      - image: circleci/openjdk:11-jdk
  deploy-agent:
    docker:
      - image: twdps/di-circleci-infra-image:stable

defaults: &defaults
  working_directory: ~/repo
  environment:
    DOCKER_REGISTRY: {{cookiecutter.PKG_ORG_NAME}}


jobs:
  build:
    executor: build-agent
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{% raw %}{{ checksum "build.gradle" }}{% endraw %}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - secrethub/exec:
          step-name: Gradle dependencies
          command: |
            ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{% raw %}{{ checksum "build.gradle" }}{% endraw %}

      - secrethub/exec:
          step-name: Run tests
          command: |
            ./gradlew check -x shellcheck

  publish:
    executor: build-agent
    environment:
      DOCKER_REGISTRY: {{cookiecutter.PKG_ORG_NAME}}
      DOCKER_USER: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/dockerhub/username
      DOCKER_PASSWORD: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/dockerhub/password

    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - secrethub/install
      - restore_cache:
          keys:
            - v1-dependencies-{% raw %}{{ checksum "build.gradle" }}{% endraw %}
            - v1-dependencies-

      - run:
          name: What's my build number?
          command: echo $CIRCLE_BUILD_NUM

      - run:
          name: Build init container
          command: docker build init-container -t {{cookiecutter.PKG_ORG_NAME}}/dps-psql-init:latest

      - run:
          name: Tag init container
          command: docker tag {{cookiecutter.PKG_ORG_NAME}}/dps-psql-init:latest {{cookiecutter.PKG_ORG_NAME}}/dps-psql-init:$CIRCLE_BUILD_NUM

      - secrethub/exec:
          step-name: Build jar
          command: |
            ./gradlew build -x check

      - run:
          name: Build Images
          command: ./gradlew docker

      - run:
          name: Tag Flyway Image
          command: docker tag {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-flyway:latest {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-flyway:$CIRCLE_BUILD_NUM

      - run:
          name: Tag OPA Init Image
          command: docker tag {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-opa-init:latest {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-opa-init:$CIRCLE_BUILD_NUM

      - run:
          name: Tag Main Image
          command: docker tag {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-app:latest {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-app:$CIRCLE_BUILD_NUM

      - run:
          name: Docker authentication
          shell: secrethub run -- /bin/sh -e
          command: |
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_USER --password-stdin

      - run:
          name: Push init container
          command: docker push {{cookiecutter.PKG_ORG_NAME}}/dps-psql-init:latest

      - run:
          name: Publish Flyway Image
          command: docker push {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-flyway

      - run:
          name: Publish OPA Init Image
          command: docker push {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-opa-init

      - run:
          name: Publish Main Image
          command: docker push {{cookiecutter.PKG_ORG_NAME}}/dps-starterkit-java-app

  dev-deploy:
    executor: deploy-agent
    environment:
      AWS_DEFAULT_REGION: us-east-2
      DOCKER_REGISTRY: {{cookiecutter.PKG_ORG_NAME}}
      DOCKER_USER: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/dockerhub/username
      DOCKER_PASSWORD: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/dockerhub/password
      POSTGRES_ENDPOINT: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/aurora/psql/endpoint
      POSTGRES_ROOT_USER: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/aurora/psql/username
      POSTGRESS_ROOT_PASSWORD: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/aurora/psql/password
      POSTGRES_USER: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/aurora/psql/starter/username
      POSTGRES_PASSWORD: secrethub://{{cookiecutter.PKG_ORG_NAME}}/di/svc/aurora/psql/starter/password
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: pull kubeconfig
          shell: secrethub run -- /bin/sh -e
          command: |
            mkdir ~/.kube
            SECRETHUB_VAR_ENV=sandbox secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config
      - run:
          name: Create registry secrets
          shell: secrethub run -- /bin/sh -e
          command: |
            kubectl create secret docker-registry docker-hub-pull-secret -n di-dev \
                        --docker-username=$DOCKER_USER \
                        --docker-password=$DOCKER_PASSWORD \
                        --dry-run=client -o yaml | kubectl apply -f -
      - run:
          name: Create postgres secrets
          shell: secrethub run -- /bin/sh -e
          command: |
            kubectl create secret generic psql-secret -n di-dev \
                        --from-literal=psql-username=$POSTGRES_USER \
                        --from-literal=psql-password=$POSTGRES_PASSWORD \
                        --from-literal=psql_root_username=$POSTGRES_ROOT_USER \
                        --from-literal=psql_root_password=$POSTGRESS_ROOT_PASSWORD \
                        --from-literal=psql_endpoint=$POSTGRES_ENDPOINT \
                        --dry-run=client -o yaml | kubectl apply -f -
  # need something to combine the endpoint, the port and the db name
  #  - run:
  #        name: run helm chart
  #        shell: secrethub run -- /bin/sh -eo pipefail
  #        command: |
  #          helm upgrade {{cookiecutter.PACKAGE_NAME}} helm \
  #                        --install \
  #                        --wait \
  #                        -f helm/api-2-dev.yaml \
  #                        -n api-2-dev \
  #                        --set tag="latest" \
  #                        --set env.name.SECRET_HELLO="$SECRET_HELLO"

workflows:
  version: 2

  build_test_publish:
    jobs:
      - build:
          context: {{cookiecutter.PKG_ORG_NAME}}-di
      - publish:
          context: {{cookiecutter.PKG_ORG_NAME}}-di
          requires:
            - build
      - dev-deploy:
          context: {{cookiecutter.PKG_ORG_NAME}}-di
          requires:
            - build
            - publish
